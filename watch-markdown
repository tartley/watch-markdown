#!/usr/bin/env bash

# Usage: watch-markdown <Markdown-file>
#
# Convert <markdown-file> to an HTML file. Open the HTML in Falkon, which has
# the nice property that if the HTML is subsequently modified, it auto-updates.
# Watch for modifications to the Markdown file. If any occur, regenerate the
# HTML file.

# TODO: With markdown2html in place for when we explicitly want to generate an
# html file, watch-markdown could write its html to /tmp, and delete it when
# done, so as not to clutter things with unwanted html files every time we view
# markdown.
#
# TODO: Same thing but for rst. Which presumably pandoc handles too.
#
# TODO: Package up for end user installs. As a snap?

set -e # -x

if [ "$#" -eq 0 ]; then
    echo "watch-markdown: ERROR: No markdown filename given" >&2
    exit 1
fi
if [ "$#" -gt 1 ]; then
    echo "watch-markdown: ERROR: More than one markdown filename given" >&2
    exit 1
fi

in="$1"
out="${in%.md}.html"

function convert {
    # Convert the given markdown file to an HTML file
    css="$HOME/.config/watch-markdown/github.css"
    pandoc --standalone -c "$css" "$in" -o "$out"
}

convert

# When we exit (ie when the html viewer below exits), kill our background processes.
function killjobs {
    jobs -p | xargs -i kill {} 2>&1 | grep -v "No such process" >&2
}
trap "killjobs" INT TERM EXIT

# Start a background process to watch for updates to the markdown. To do this,
# we need to run inotifywait on two event types:
#   1. close_write (as is done by things that directly modify the file)
#   2. moved_to (as is done by Emacs/Vi-style write-new-then-move-to-overwrite)
# After (2), a watch on the file will no longer work, since it has been replaced
# by a new, different file of the same name. Hence we need to set up a watch on
# the parent directory, and then filter the resulting events for the filename we
# are watching.
parentdir=$(dirname "$in")
inotifywait --quiet --monitor --event close_write,moved_to --format "%e/%f" $parentdir \
| while IFS=/ read -r events file; do
    # If the event is for the markdown file we are watching
    actual=$(realpath $parentdir/$file)
    expected=$(realpath $in)
    if [ "$actual" = "$expected" ]; then
        # Regenerate the HTML file again.
        convert
    fi
done &

# Open a window to view the generated HTML, and block here until it exits.
# Firefox & Chrome don't re-render a local html file when it changes. Nor can
# they be instructed to poll it by callers re-opening the same file in an
# existing tab. Hence, we use an HTML viewer that does automatically update
# when the HTML is modified. (ie. Gnome Web (aka epiphany), or Falkon) To avoid
# the confusing reinstatement of multiple old tabs, open a --private-browsing
# session.
falkon --no-extensions --private-browsing "$out"

