#!/usr/bin/env bash

# Usage: watch-markdown <Markdown-file> (see 'usage' & 'help' below)
#
# TODO: we should use 'entr' instead of 'rerun2':
#       * By default it watches a single file, which is exactly what we want, and
#         rerun2 needs modification to support that.
#       * It reduces code/complexity in our script
#       * A lot more effort has gone into it than rerun2, we should trust it, presumably.
#       DONE: Is code complete
#       DONE: PROBLEM: terminal borked after running ('stty sane' recovers it)
#             SOLUTION: use `entr -n`, which I don't 100% understand, but it works.
#       DONE: error message from entr when markdown file is updated: 'file not found'
#             SOLUTION: I was passing the whole pandoc command line as a single string,
#             which was being used as the name of an executable. We need to pass
#             each item as a separate arg.
#       TODO: Cannot get quoting right to make this work on file with spaces in
#             the name. Possibly this never worked with the previous 'inotifywait'
#             implementation either.
#             Possibly related: https://stackoverflow.com/a/10836225
# TODO: Did I over-zealously remove from the github.css some border, background of
#       notes?
# TODO: And configurable conversion from one file format to another needs to be pulled
#       out of this script. So it becomes a one-shot conversion script, which acts like
#       'markdown2html', but configurable for filetypes. It should:
#       * Read from stdin if no input file is named
#       * Output to stdout if no output file is given.
#       Then this script reduces to just invoking 'rerun2' on 'conversion', and opening
#       the viewer. This sounds right. (Beware imagemagik has a script called 'convert')
# TODO: Should configuration of output filetype viewer be tied to the conversion?
#       I'm beginning to think not. It should depend on output filetype, not input type.
#       Beware we don't want to build something that badly mimics the desktop's existing
#       file type associations to view different file types. But on the other hand, we
#       don't want to force users to make weird default choices for viewing things like
#       html files just because the weird viewer refreshes on updates. Hmmmm.
# TODO: Also handle rst->html. (Which pandoc handles with a simple '--from=rst')
# TODO: Also handle dot->svg.
# TODO: Provide a set of default configurations for common file types, consisting of:
#       * command to convert source (eg Markdown) to target (eg HTML) file, and
#       * viewer (eg browser) for target file.
# TODO: Let user add their own custom configurations, that let them handle their own
#       filetypes, or override built-in ones.
# TODO: cmdline arg to list currently available configs
# TODO: Package up for end user installs. As a snap?

set -e # Errors terminate the script.
set -u # Unset variables are errors.
# set -x # print debugging output of every executed command
set -o pipefail

usage="\
Usage:
    watch-markdown OPTIONS FILENAME
OPTIONS may include:
    -h|--help  Display this help.
and FILENAME is the name of a Markdown input file.
"

help="\
Convert input markdown file FILENAME into an HTML file in /tmp. In the
background, regenerate the HTML on changes to FILENAME. Meanwhile, open the
'falkon' application (aka Gnome Web) to view the HTML. This has the nice
property that it auto-refreshes if the HTML file changes. When the HTML viewer
application is closed, delete the HTML file, kill our background process, and
exit.

This means you can run watch-markdown from the command-line, or by
double-clicking on a markdown file in the GUI, and get a window displaying the
markdown rendered as HTML. If you edit the markdown in your favorite editor,
the displayed HTML auto-updates every time you hit save.
"

# Command line args

# accumulate 'input file' args here
infiles=()
unrecognized=()

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help) printf "$usage\n$help"; exit;;
        --example) example=$2; shift;;
        -*) unrecognized+=( "$1" );;
        *) infiles+=( "$1" );;
    esac
    shift
done

if [ "${#unrecognized[@]}" -gt 0 ]; then
    echo >&2 "Unrecognized args: ${unrecognized[@]}"
    echo >&2 "$usage"
    exit 1
fi
if [ ${#infiles[@]} -eq 0 ]; then
    echo >&2 "No filename given."
    exit 1
fi
if [ ${#infiles[@]} -gt 1 ]; then
    echo >&2 "Can only take 1 filename, got ${#infiles[@]}: ${infiles[@]}"
    exit 1
fi

in="${infiles[0]}"

# Output to a file in /tmp.
outdir='/tmp/watch-markdown'
mkdir -p "$outdir"
# The output file is not expected to be useful to end-users. Make the output
# filename depend on the full input pathname, resolving symlinks so that any
# two instances of this script running on the same input file (whether using
# relative or absolute filenames, or symlinks) will generate the same output
# file name. For ease of debugging, use a filename that is an easily
# human-readable transform of the input file's full pathname.
out="$outdir/$(realpath "${in%.md}.html" | tr '/' '-')"
# We can use the existence of the output file as a mutex, to prevent multiple
# instances of this script from running simultaneously on the same input, which
# would be needless and possibly destructive.
if [ -f "$out" ]; then
    echo >&2 "The output file already exists. Is watch-markdown already running on this input? If not, try deleting the output file: $out"
    exit 2
fi

# Cleanup on exit (ie when the HTML viewer at the end of this script exits)
function cleanup {
    # Kill our child processes.
    kill $(ps -o pid= --ppid $$) 2>&1 | grep -v "No such process" >&2 || :
    # Clean up our output file
    rm -f "$out"
}
trap "cleanup" INT TERM EXIT

# Generate the command to convert our input file to our output file
css="$HOME/.config/watch-markdown/style.css"
printf -v convert_command "pandoc --standalone -c %q %q -o %q\n" "$css" "$in" "$out"

# Start a background process to watch for updates to the markdown.
echo "$in" | entr -n $convert_command &

# Open a window to view the generated HTML. We want a viewer that:
# * Runs synchronously, so that this script blocks here until it exits.
# * Re-renders automatically if the HTML file changes. Firefox & Chrome don't
#   do this, but KDE's browser Falkon does (as does Gnome Web, aka epiphany).
# To avoid the confusing reinstatement of multiple old tabs, we open a
# --private-browsing session.
falkon --no-extensions --private-browsing "$out"

