#!/usr/bin/env bash

# Usage: watch-markdown <Markdown-file> (see 'usage' & 'help' below)
#
# TODO: Since switching from rerun to entr, errors from pandoc are no longer
#       propagated to cmdline exit value, nor to GUI error displayer.
#       I theorize this is because entr calls a shell which calls $cmd,
#       and error exit values aren't propagated back. 'man entr' seems
#       to confirm this: entr does not care about nor propagate cmd exit
#       values, unless one provides '-z', which exits entr when cmd exits.
#       Which isn't what I want. Hmmm.
#       Should I revert to using inotify-wait for this scripted invocation,
#       and save 'entr' for interactive use, as it was designed for?
#       Or alternatively, augment 'rerun' to accept names of specific files to
#       watch?
#       There are four exit handling scenarios to consider:
#       * Sunny day: The user exits Falkon, presumably with 0 exit code.
#         We do not need to kill our children in this case, and do not need
#         to display any errors.
#       * This script is terminated with Ctrl-C. Both it and its children
#         recieve the SIGINT signal and exit. So in this case, the trap does
#         not need to explicitly kill our children, and their exit value is
#         presumably known to be 130 (2 for sigint exit, and bash adds 128 to
#         processes exiting due to a fatal (ie. unhandled) signal.)
#         Since this is a user-initiated event, I don't think we need to display
#         any error message.
#       * Our child (the html generation command) exits with a nonzero exit
#         code. This is our buggy case. We need:
#         * To detect it has happened.
#         * Retrieve the child's exit code. (Do we really need this? I guess including
#           it in our error message might be helpful)
#         * Propagate any stderr from entr or its child to our stderr, so that GUI
#           error message may be shown.
#         * No need to kill our children. Maybe the trap needs to guard against
#           trying to kill a child that has already exited, to prevent causing new
#           errors that obfusticate the first.
#         * But we do need the trap to (conditionally) delete our output, as normal.
#         * Propagate the child exit code. I think the GUI wrapper appends this to the
#           displayed message.
#       * This script exits due to some other signal.
#         I'm not sure what to do about this. For now, nothing then.
#
# TODO: Writing output to /tmp breaks any relative directory links,
#       such as images in the same dir. We need to write the html to the same dir as
#       our input file, and delete it when we're done.
# TODO: switch back to '\' substitutions in the output filename?
# TODO: Report a bug in entr's cleanup of stdin handling? Whatever is causing
#       the invisible typing when I call my script without using `entr -n` ?
# TODO: Did I over-zealously remove from the github.css some border, background of
#       notes?
# TODO: Auto-selection of correct command for input filetype. Can identify mime-type
#       to an extent. But may have to write our own heuristics for detecting markdown.
#       :-( NO, maybe we can define a markdown MIME type for this purpose:
#       https://help.gnome.org/admin/system-admin-guide/stable/mime-types-custom-user.html.en
# TODO: And configurable conversion from one file format to another needs to be pulled
#       out of this script. So it becomes a one-shot conversion script, which acts like
#       'markdown2html', but configurable for filetypes. It should:
#       * Read from stdin if no input file is named
#       * Output to stdout if no output file is given.
#       Then this script reduces to just invoking 'entr' on 'conversion', and opening
#       the viewer. This sounds right. (Beware imagemagik has a script called 'convert')
# TODO: Should configuration of output filetype viewer be tied to the conversion?
#       I'm beginning to think not. It should depend on output filetype, not input type.
#       Beware we don't want to build something that badly mimics the desktop's existing
#       file type associations to view different file types. But on the other hand, we
#       don't want to force users to make weird default choices for viewing things like
#       html files just because the weird viewer refreshes on updates. Hmmmm.
# TODO: Also handle rst->html. (Which pandoc handles with a simple '--from=rst')
# TODO: Also handle dot->svg.
# TODO: Provide a set of default configurations for common file types, consisting of:
#       * command to convert source (eg Markdown) to target (eg HTML) file, and
#       * viewer (eg browser) for target file.
# TODO: Let user add their own custom configurations, that let them handle their own
#       filetypes, or override built-in ones.
# TODO: cmdline arg to list currently available configs
# TODO: Package up for end user installs. As a snap?

set -e # Errors terminate the script.
set -u # Unset variables are errors.
# set -x # print debugging output of every executed command
set -o pipefail

usage="\
Usage:
    watch-markdown OPTIONS FILENAME
OPTIONS may include:
    --cd       Change to the given markdown file's directory,
               useful for GUI invocation on markdown containing relative paths.
    -h|--help  Display this help.
and FILENAME is the name of a Markdown input file.
"

help="\
Convert input markdown file FILENAME into an HTML file in /tmp. In the
background, regenerate the HTML on changes to FILENAME. Meanwhile, open the
'falkon' application (aka Gnome Web) to view the HTML. This has the nice
property that it auto-refreshes if the HTML file changes. When the HTML viewer
application is closed, delete the HTML file, kill our background process, and
exit.

This means you can run watch-markdown from the command-line, or by
double-clicking on a markdown file in the GUI, and get a window displaying the
markdown rendered as HTML. If you edit the markdown in your favorite editor,
the displayed HTML auto-updates every time you hit save.
"

# Command line args

# accumulate 'input file' args here
infiles=()
unrecognized=()
changedir=false

while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help) printf "$usage\n$help"; exit;;
        --cd) changedir=true;;
        -*) unrecognized+=( "$1" );;
        *) infiles+=( "$1" );;
    esac
    shift
done

if [ "${#unrecognized[@]}" -gt 0 ]; then
    echo >&2 "Unrecognized args: ${unrecognized[@]}"
    echo >&2 "$usage"
    exit 1
fi
if [ ${#infiles[@]} -eq 0 ]; then
    echo >&2 "No filename given."
    exit 1
fi
if [ ${#infiles[@]} -gt 1 ]; then
    echo >&2 "Can only take 1 filename, got ${#infiles[@]}: ${infiles[@]}"
    exit 1
fi

in="${infiles[0]}"

if [ "$changedir" = "true" ]; then
    cd $(dirname $in)
fi

# Output to a file in /tmp.
outdir='/tmp/watch-markdown'
mkdir -p "$outdir"
# The output file is not expected to be useful to end-users. Make the output
# filename depend on the full input pathname, resolving symlinks so that any
# two instances of this script running on the same input file (whether using
# relative or absolute filenames, or symlinks) will generate the same output
# file name. For ease of debugging, use a filename that is an easily
# human-readable transform of the input file's full pathname.
out="$outdir/$(realpath "${in%.md}.html" | tr '/' '-')"
# We can use the existence of the output file as a mutex, to prevent multiple
# instances of this script from running simultaneously on the same input, which
# would be needless and possibly destructive.
if [ -f "$out" ]; then
    echo >&2 "The output file already exists. Is watch-markdown already running on this input? If not, try deleting the output file: $out"
    exit 2
fi

# Cleanup on exit (normally when the HTML viewer at the end of this script exits)
cleanup() {
    # Do all cleanup, even if one step fails
    set +e
    # Kill the child we spawned (the 'entr' command below)
    kill $childpid 2>&1 | grep -v 'process'
    # Remove our output file
    rm -f "$out"
}
trap "cleanup" INT TERM EXIT

# Generate the command to convert our input file to our output file
css="$HOME/.config/watch-markdown/style.css"
cmd="pandoc --standalone -c \"${css}\" \"${in}\" -o \"${out}\""

# Convert markdown to HTML, and update whenever the markdown changes.
# The new shell is to parse $cmd. My failed attempts to pass $cmd to entr
# without using a new shell are described here:
# https://stackoverflow.com/questions/75467601/how-to-pass-a-bash-command-to-entr-quoting-to-guard-against-filenames-with-sp
# I don't use entr's '-s' arg to avoid the "Bash exit value: x" on stdout.
echo "$in" | entr -n -s "$cmd" &
childpid=$!

# Open a window to view the generated HTML. We want a viewer that:
# * Runs synchronously, so that this script blocks here until it exits.
# * Re-renders automatically if the HTML file changes. Firefox & Chrome don't
#   do this, but KDE's browser Falkon does (as does Gnome Web, aka epiphany).
# --private-browsing to avoid the confusing reinstatement of multiple old tabs.
# --no-extensions just out of kneejerk conservatism.
falkon --no-extensions --private-browsing "$out"

