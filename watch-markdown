#!/usr/bin/env bash

# Usage: watch-markdown <Markdown-file>
#
# Convert <markdown-file> to an HTML file. Open the HTML in Falkon, which has
# the nice property that if the HTML is subsequently modified, it auto-updates.
# Watch for modifications to the Markdown file. If any occur, regenerate the
# HTML file.

# TODO Opening via GUI should use a wrapper script that redirects everything to
# a log
#
# TODO: open an md by double-clicking: check the logs!
#
# TODO Opening from GUI fails because $in = <abspath>/my-guide.md, but
# inotifywait gives $file='my-guide.md', so they don't compare equal in the
# explicit 'if' in the while loop.
#
# TODO: watch-markdow currently works when invoked from the command-line, but
# when invoked from the Gnome GUI by double-clicking a markdown file, it leaves
# three processes behind after exiting the HTML viewer. This is puzzling,
# because when running from the command-line, we only seem to create two
# processes (the watch-markdown Bash invocation, which is blocking until the
# HTML viewer exits, and the background inotify watch for markdown changes it
# kicks off.) Theory: A normally-transient process is getting wedged because it
# is writing to stderr/stdout, which isn't attached when we launch from the
# GUI. Hence -gui wrapper that redirects everything should help.
#
# TODO: Check it also works by 'Open With Other Application'
#
# TODO: Consider breaking out the conversion into a new wrapper script,
# `markdown2html`, so that I can invoke that standalone and be sure of getting
# the same output as I see when using this tool.
#
# TODO: With markdown2html in place place for when we explicitly want to
# generate an html file, watch-markdown could write its html to /tmp, and
# delete it when done, so as not to clutter things with unwanted html files
# every time we view markdown.
#
# TODO: Same thing but for rst. Which presumably pandoc handles too.

set -e -x

in="$1"
out="${in%.md}.html"
css="$HOME/.config/watch-markdown/github.css"

function convert {
    # Convert the given markdown file to an HTML file
    pandoc --standalone -c "$css" "$in" -o "$out"
}

convert

# When we exit (ie when the html viewer exits), kill the background process below
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT

# In the background, watch for updates to the markdown, and convert to HTML again
(
    # We need to run inotifywait on two event types:
    #   1. close_write (as is done when directly modifying the file)
    #   2. moved_to (as is done by Vi-style write-new-then-move-to-overwrite)
    # After (2), a watch on the file will no longer work, since it has been replaced
    # by a new, different file of the same name. Hence we need to set up a watch on
    # the parent directory of the markdown file, and then filter the resulting events
    # for the markdown filename.
    inotifywait --quiet --monitor --event close_write,moved_to --format "%e/%f" $(dirname "$in") \
    | while IFS=/ read -r events file; do
        # If the event is for the markdown file we are watching
        if [ "$(realpath $file)" = "$(realpath $in)" ]; then
            convert
        fi
    done
) &

# debugging aid
jobs >&2

# Open a window to view the generated HTML, and block here until it exits.
# Firefox & Chroms don't re-render a local html file when it changes. Nor can
# they be instructed to poll it by callers re-opening the same file in an
# existing tab. Hence, we use an HTML viewer that does automatically update
# when the HTML is modified. (ie. Gnome Web (aka epiphany), or Falkon) To avoid
# the confusing reinstatement of multiple old tabs, open a --private-browsing
# session.
falkon --no-extensions --private-browsing "$out"

